# Libft Proyect

Semana 1: Fundamentos y Funciones Básicas de Libc
Días 1-3: Preparación y Configuración

- Configurar el entorno de desarrollo
- Leer completamente el subject del proyecto
- Configurar el Makefile
- Crear la estructura básica del proyecto (libft.h)
- Estudiar los conceptos básicos de C

Días 4-7: Funciones de Manipulación de Caracteres y Strings

- Implementar funciones de verificación de caracteres:
    x ft_isalpha
		checks  for an alphabetic character; in the standard "C" locale,
		it is equivalent to (isupper(c) ||  islower(c)).   In  some  lo‐
		cales, there may be additional characters for which isalpha() is
		true—letters which are neither uppercase nor lowercase.
		RETURN VALUE
       		The  values  returned  are  nonzero  if  the character c falls into
       		the tested class, and zero if not.
    
    x ft_isdigit
    		The  values  returned  are nonzero if the character c falls into
    		the tested class, and zero if not.

    x ft_isalnum
    		 The  values  returned  are nonzero if the character c falls into the
    		 tested class, and zero if not.
    		 
    x ft_isascii
    		checks whether c is a 7-bit unsigned char value that fits into the ASCII character 	
    		set. (mayor que 0 y menor que 127)
    		
    x ft_isprint
    		
- Implementar funciones de conversión de caracteres:
    x ft_toupper
    x ft_tolower
    
- Implementar funciones de manejo de strings:
    x ft_strlen
    x ft_strchr
		The strchr() and strrchr() functions return a pointer  to  the  matched
		character  or NULL if the character is not found.  The terminating null
		byte is considered part of the string, so that if  c  is  specified  as
		'\0', these functions return a pointer to the terminator.
		
    x ft_strrchr
		The strrchr() function returns a pointer to the last occurrence of the
		character c in the string s.

Semana 2: Funciones de Memoria y Strings Más Complejas
Días 8-10: Funciones de Memoria

- Implementar funciones de manipulación de memoria:
    - ft_memset
		fills the first n bytes of the memory area pointed to by s with
		the constant byte c.
		The memset() function returns a pointer to the memory area s.
		
    - ft_bzero
    - ft_memcpy
    - ft_memmove
    - ft_memchr
    - ft_memcmp
- Comprender la diferencia entre memoria del stack y del heap
- Practicar gestión de memoria y punteros

Días 11-14: Funciones de Strings Avanzadas

- Implementar funciones de concatenación y copia:
    - ft_strlcpy
    - ft_strlcat
    - ft_strncmp
    - ft_strnstr
- Implementar funciones de conversión:
    - ft_atoi
    - ft_calloc
    - ft_strdup

Semana 3: Funciones Adicionales y Gestión de Memoria Dinámica
Días 15-17: Funciones de Manipulación de Strings

- Implementar funciones de substring y concatenación:
    - ft_substr
    - ft_strjoin
    - ft_strtrim
- Profundizar en malloc() y gestión de memoria dinámica
- Practicar manejo de errores y validación de inputs

Días 18-21: Funciones Avanzadas de Strings

- Implementar funciones más complejas:
    - ft_split
    - ft_itoa
    - ft_strmapi
    - ft_striteri
- Practicar trabajo con punteros a funciones
- Comprender conceptos de iteración y transformación de strings

Semana 4: Funciones de Impresión y Bonus (Listas)
Días 22-24: Funciones de Impresión

- Implementar funciones de impresión:
    - ft_putchar_fd
    - ft_putstr_fd
    - ft_putendl_fd
    - ft_putnbr_fd
- Comprender file descriptors
- Practicar escritura en diferentes outputs

Días 25-28: Bonus (Listas)

- Estudiar la estructura de listas enlazadas
- Implementar funciones bonus:
    - ft_lstnew
    - ft_lstadd_front
    - ft_lstsize
    - ft_lstlast
    - ft_lstadd_back
    - ft_lstdelone
    - ft_lstclear
    - ft_lstiter
    - ft_lstmap
- Practicar manipulación de estructuras de datos

Consejos Generales:

1. Usa herramientas como Norminette para verificar el cumplimiento de la norma
2. Crea funciones de prueba para cada implementación
3. Utiliza git para control de versiones
4. No copies código, intenta entender y escribir el tuyo propio
5. Consulta el man de las funciones originales
6. Toma descansos y no te frustres

Recursos Recomendados:

- Documentación de C de 42
- Man pages de Unix
- Tutoriales de C en YouTube
- Comunidad de 42 en Discord o foros
